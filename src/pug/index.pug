extends ./layout.pug

block content

	section
		h2 Learnings from the development of the the new fundraising frontend application

	section
		h2 Topics
		ul
			li.fragment Our planning
			li.fragment Our working mode
			li.fragment Things we learnt when coding
			
	section
		h2 Our Planning
		ul
			li.fragment Define Use cases
			li.fragment Estimate each story as an epic
			li.fragment Rough Milestones: Campaign-Ready, Feature-Parity, "New Stuff"
		aside.notes Describe difference between user story and use case. The story "user wants to donate" is implemented in 3-4 use cases: Show donation form, add donation, display donation result, Paypal notification

	section
		h2 Our working mode
		ul
			li.fragment Work on each story, breaking it down into smaller tasks as needed
			li.fragment Tasks are picked from the board
			li.fragment No sprints, one big burndown chart
		
	section
		h2 Learning
		p Progress tracking based on rough story estimates is highly unreliable.
		p: img.fragment(src="img/youdontsay.png", height=400)
	
	section
		section
			h2 Learning
			p Use cases describe functionality and neglect "infrastructure" effort
			p.fragment Keep infrastructure concerns in mind when breaking down tasks and create separate tickets for them
		
		section
			h3 Typical infrastructure concerns?
			ul.fragment
				li Database
				li Web request handling (routing)
				li Validation
				li Internationalization and Localization
				li External services
				li Logging
				li Deployment

	section
		// TODO Add nice "Celebration" background?
		h2 When to celebrate?
		aside.notes Talk about feeling of "not making progress". Sprints have builtin "celebration points".
	
	section
		h2 Solutions?
		ul
			li.fragment Distribute stories to more milestones?
			li.fragment ???
				
	section
		h2 Communication
		ul
			li Task board 
			li Code reviews
			li Sporadic dailies 
			li In-Person for planning and WTF moments during code review
		p.fragment 
			strong Lesson: 
			| "Distributed" teams can work well and can self-organize/priotitize
		aside.notes "Distributed" means not working in the same place or at the same time
		
	section
		h2 Encourage shared commitment.
		p Work on big tasks (e.g. use cases or other big todos) with more than one person. 
		.fragment
			h3 Advantages
			ul
				li knowledge sharing
				li improve and increase interpersonal communication
				li have a better sense of achievement and progress (by not working in parallalel)

		
	section
		h2 Don't be a lone explorer
		p When trying out "new stuff" (eg. new patterns, libraries or languages), learn together.
		aside.notes That means to do pair programming, intensive reviews and demos.
		
	section
		h2 Review-First
		p: strong Before working on your code, always check if code needs to be reviewed!
		
	section
		h2 Use code for reviews
		aside.notes Make followup-PRs instead of commenting. 
		
	section
		h2 More lines, less cleverness
		p What is better, this
		pre: code
			| foreach ( ['name', 'street', 'zip', 'city', 'email' ] as $field ) {
			|	$setter = 'set' . ucfirst( $field )
			| 	$address->$setter( $_REQUEST[$field] );
			| }
		p or this
		pre: code
			| $address->setName( $_REQUEST['name'] );
			| $address->setStreet( $_REQUEST['street'] );
			| $address->setZip( $_REQUEST['zip'] );
			| $address->setCity( $_REQUEST['city'] );
			| $address->setEmail( $_REQUEST['email'] );
		aside.notes The latter is better because it eases refactoring (renaming of settings in the address object) and decouples HTML forms fields from entity field names. 
		
	section
		h2 Continous integration/deployment
		p For every pull request, do the following checks
		ul
			li Coding style
			li All the tests (Unit/Integration/System, etc)
			li Code metrics
		p Check both PHP and JavaScript code!
		p Master is always clean and deployable.
			
